getwd()
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
View(query_results)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
View(query_results)
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
View(toSend)
toSend[["queryList"]]
timeout(1)
timeout(2)
timeout(100)
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json", timeout(120))
View(query_results)
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json", timeout(1000))
View(query_results)
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
query_results_text
name.vec
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
df.names$Name
# write potential metabolite names in tsv file
write.table(df.names$Name, file.path(outfolder,"compound2metabolite", paste0(date,"_name-list.tsv")), quote = F, col.names = F, row.names = F, sep = ',', na = "")
# write potential metabolite names in tsv file
write.table(df.names$Name, file.path(outfolder,"compound2metabolite", paste0(date,"_name-list.tsv")), quote = F, col.names = F, row.names = F, sep = ',', na = "")
# write potential metabolite names in tsv file
write.table(df.names$Name, file.path(outfolder,"compound2metabolite", paste0(date,"_name-list.tsv")), quote = F, col.names = F, row.names = F, sep = '\t', na = "")
# write potential metabolite names in tsv file
write.table(df.names$Name, file.path(outfolder,"compound2metabolite", paste0(date,"_name-list.tsv")), quote = F, col.names = F, row.names = F, sep = '\t', na = "")
df.names$Name
?write.table
# write potential metabolite names in tsv file
write.table(df.names$Name, file.path(outfolder,"compound2metabolite", paste0(date,"_name-list.tsv")), quote = F, col.names = F, row.names = F, sep = '\n', na = "")
# write potential metabolite names in tsv file
write.table(df.names$Name, file.path(outfolder,"compound2metabolite", paste0(date,"_name-list.tsv")), quote = F, col.names = F, row.names = F, sep = '\n', na = "")
df.names$Name
as.character(df.names$Name)
nr(df.names$Name)
count(df.names$Name)
length(df.names$Name)
# automatic processing
# create name vector and format type
name.vec <- paste(df.names$Name, collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
df.names$Name[1-10]
df.names$Name[,10]
df.names$Name[10]
df.names$Name[1:10]
name.vec <- paste(df.names$Name[1:499], collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
name.vec <- paste(df.names$Name[1:400], collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
length(df.names$Name)/400
round(length(df.names$Name)/400)
?round(
)
ceiling(length(df.names$Name)/400)
floor(length(df.names$Name)/400)
ceiling(length(df.names$Name)/400)
i<-ceiling(length(df.names$Name)/400)
length(df.names$Name) /3
separations <-ceiling(length(df.names$Name)/400)
length(df.names$Name)/separations
length(df.names$Name)/separations
length(df.names$Name)/separations+1
length(df.names$Name)/separations*2
df.names$Name[1:length(df.names$Name)/separations]
1:length(df.names$Name)/separations
length(df.names$Name)/separations
(length(df.names$Name)/separations)
1:(length(df.names$Name)/separations)
(length(df.names$Name)/separations*2+1)
(length(df.names$Name)/separations*(i-1)+1)
i
(length(df.names$Name)/separations*(i-1)+1):(length(df.names$Name)/separations*i)
ceiling(length(df.names$Name)
)
length(df.names$Name)
ceiling(length(df.names$Name)/400)
length(df.names$Name)/separations
round(length(df.names$Name)/separations*(i-1)+1):round(length(df.names$Name)/separations*i)
name.vec <- paste(df.names$Name[round(length(df.names$Name)/separations*(i-1)+1):round(length(df.names$Name)/separations*i)], collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
# replae NULL values with NA
Query <- unlist(nullToNA(query_results_json[[1]]))
Match <- unlist(nullToNA(query_results_json[[2]]))
HMDB <- unlist(nullToNA(query_results_json[[3]]))
PubChem <- unlist(nullToNA(query_results_json[[4]]))
ChEBI <- unlist(nullToNA(query_results_json[[5]]))
KEGG <- unlist(nullToNA(query_results_json[[6]]))
METLIN <- unlist(nullToNA(query_results_json[[7]]))
SMILES <- unlist(nullToNA(query_results_json[[8]]))
query_results_table <- data.frame(Query,Match, HMDB, PubChem, ChEBI ,KEGG, METLIN, SMILES)
query_results <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
View(query_results)
query_results <- as.data.frame()
query_results <- data.frame()
query_results <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
query_results <- data.frame()
query_results_i <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
query_results <- rbind(query_results, query_results_i)
View(query_results)
length(df.names$Name)
# automatic processing
# create name vector and format type
if (length(df.names$Name) > 399) {
query_results <- data.frame()
separations <-ceiling(length(df.names$Name)/400)
for (i in 1:separations) {
name.vec <- paste(df.names$Name[round(length(df.names$Name)/separations*(i-1)+1):round(length(df.names$Name)/separations*i)], collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
# replae NULL values with NA
Query <- unlist(nullToNA(query_results_json[[1]]))
Match <- unlist(nullToNA(query_results_json[[2]]))
HMDB <- unlist(nullToNA(query_results_json[[3]]))
PubChem <- unlist(nullToNA(query_results_json[[4]]))
ChEBI <- unlist(nullToNA(query_results_json[[5]]))
KEGG <- unlist(nullToNA(query_results_json[[6]]))
METLIN <- unlist(nullToNA(query_results_json[[7]]))
SMILES <- unlist(nullToNA(query_results_json[[8]]))
query_results_table <- data.frame(Query,Match, HMDB, PubChem, ChEBI ,KEGG, METLIN, SMILES)
query_results_i <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
query_results <- rbind(query_results, query_results_i)
}
} else  {
name.vec <- paste(df.names$Name, collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
# replae NULL values with NA
Query <- unlist(nullToNA(query_results_json[[1]]))
Match <- unlist(nullToNA(query_results_json[[2]]))
HMDB <- unlist(nullToNA(query_results_json[[3]]))
PubChem <- unlist(nullToNA(query_results_json[[4]]))
ChEBI <- unlist(nullToNA(query_results_json[[5]]))
KEGG <- unlist(nullToNA(query_results_json[[6]]))
METLIN <- unlist(nullToNA(query_results_json[[7]]))
SMILES <- unlist(nullToNA(query_results_json[[8]]))
query_results_table <- data.frame(Query,Match, HMDB, PubChem, ChEBI ,KEGG, METLIN, SMILES)
query_results <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
}
View(query_results_i)
View(query_results)
i=2
i<-1
name.vec <- paste(df.names$Name[round(length(df.names$Name)/separations*(i-1)+1):round(length(df.names$Name)/separations*i)], collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
# replae NULL values with NA
Query <- unlist(nullToNA(query_results_json[[1]]))
Match <- unlist(nullToNA(query_results_json[[2]]))
HMDB <- unlist(nullToNA(query_results_json[[3]]))
PubChem <- unlist(nullToNA(query_results_json[[4]]))
ChEBI <- unlist(nullToNA(query_results_json[[5]]))
KEGG <- unlist(nullToNA(query_results_json[[6]]))
METLIN <- unlist(nullToNA(query_results_json[[7]]))
SMILES <- unlist(nullToNA(query_results_json[[8]]))
query_results_table <- data.frame(Query,Match, HMDB, PubChem, ChEBI ,KEGG, METLIN, SMILES)
query_results_i <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
query_results <- data.frame()
query_results <- rbind(query_results, query_results_i)
i<-2
name.vec <- paste(df.names$Name[round(length(df.names$Name)/separations*(i-1)+1):round(length(df.names$Name)/separations*i)], collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
# replae NULL values with NA
Query <- unlist(nullToNA(query_results_json[[1]]))
Match <- unlist(nullToNA(query_results_json[[2]]))
HMDB <- unlist(nullToNA(query_results_json[[3]]))
PubChem <- unlist(nullToNA(query_results_json[[4]]))
ChEBI <- unlist(nullToNA(query_results_json[[5]]))
KEGG <- unlist(nullToNA(query_results_json[[6]]))
METLIN <- unlist(nullToNA(query_results_json[[7]]))
SMILES <- unlist(nullToNA(query_results_json[[8]]))
query_results_table <- data.frame(Query,Match, HMDB, PubChem, ChEBI ,KEGG, METLIN, SMILES)
query_results_i <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
# automatic processing
# create name vector and format type
if (length(df.names$Name) > 399) {
query_results <- data.frame()
separations <-ceiling(length(df.names$Name)/400)
for (i in 1:separations) {
name.vec <- paste(df.names$Name[round(length(df.names$Name)/separations*(i-1)+1):round(length(df.names$Name)/separations*i)], collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results_html <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results_html$status_code==200
# Parse the response into a table
query_results_text <- content(query_results_html, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
# replae NULL values with NA
Query <- unlist(nullToNA(query_results_json[[1]]))
Match <- unlist(nullToNA(query_results_json[[2]]))
HMDB <- unlist(nullToNA(query_results_json[[3]]))
PubChem <- unlist(nullToNA(query_results_json[[4]]))
ChEBI <- unlist(nullToNA(query_results_json[[5]]))
KEGG <- unlist(nullToNA(query_results_json[[6]]))
METLIN <- unlist(nullToNA(query_results_json[[7]]))
SMILES <- unlist(nullToNA(query_results_json[[8]]))
query_results_table <- data.frame(Query,Match, HMDB, PubChem, ChEBI ,KEGG, METLIN, SMILES)
query_results_i <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
query_results <- rbind(query_results, query_results_i)
}
} else  {
name.vec <- paste(df.names$Name, collapse = ';')
toSend = list(queryList = name.vec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
query_results_html <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results_html$status_code==200
# Parse the response into a table
query_results_text <- content(query_results_html, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, flatten = TRUE)
# replae NULL values with NA
Query <- unlist(nullToNA(query_results_json[[1]]))
Match <- unlist(nullToNA(query_results_json[[2]]))
HMDB <- unlist(nullToNA(query_results_json[[3]]))
PubChem <- unlist(nullToNA(query_results_json[[4]]))
ChEBI <- unlist(nullToNA(query_results_json[[5]]))
KEGG <- unlist(nullToNA(query_results_json[[6]]))
METLIN <- unlist(nullToNA(query_results_json[[7]]))
SMILES <- unlist(nullToNA(query_results_json[[8]]))
query_results_table <- data.frame(Query,Match, HMDB, PubChem, ChEBI ,KEGG, METLIN, SMILES)
query_results <- as_tibble(query_results_table) %>%
select(-SMILES)%>%
rename(Name=Query)%>%
rename(Metabolite=Match)
}
View(query_results)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
View(df.names)
length(df.names$Name)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
source("~/Documents/GitHub/Metapolish/scripts/Metapolish_main-anaylsis-script.R", echo=TRUE)
